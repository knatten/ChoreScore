<App Theme="Basic" Background="#e5e8ed">
    <JavaScript>
    var Observable = require("FuseJS/Observable");
    var Lifecycle = require("FuseJS/Lifecycle");
    var Storage = require("FuseJS/Storage");
    var personsFile = "persons.json";

    Lifecycle.onEnteringBackground = function()
    {
        console.log("Entering background");
        Save();
    }

    var Save = function()
    {
        console.log("Saving data to " + personsFile);
        var serialized = [];
        persons.forEach(function(p){serialized.push({'name':p.name, 'score':p.score.value})});
        var result = Storage.writeSync(personsFile, JSON.stringify(serialized));
        console.log("Result of saving file: " + result);
    }

    var Load = function()
    {
        console.log("Loading data from " + personsFile);
        Storage.read(personsFile).then(function(content){
            console.log("Loaded data from file:");
            console.log(content);
            console.log("Populating model");
            var deserialized = JSON.parse(content);
            persons.clear();
            deserialized.forEach(
                function(p)
                {
                    console.log("Adding from deserialized: " + p.name);
                    persons.add(new Person(p.name, p.score));
                });
            console.log("Done populating model");
        }, function(error){
            console.log("Failed to load data from " + personsFile)
            console.log(error);
        });
    }

    function Person(name, score)
    {
        this.name = name;
        this.score = Observable(score);
    }

    function addPerson(sender)
    {
        if (newPerson.value.length == 0)
            return;

        console.log("Adding person " + newPerson.value);
        persons.add(new Person(newPerson.value, 0));
        newPerson.value="";
    }

    function bumpScore(sender)
    {
        console.log("Scored " + sender.data.name);
        sender.data.score.value = sender.data.score.value + 1;
    }

    function resetScores()
    {
        console.log("Resetting scores");
        persons.forEach(function(p)
            {
                p.score.value = 0;
            });
    }

    var persons = Observable(
        new Person("Alice", 0),
        new Person("Bob", 0),
        new Person("Eve", 0)
        );

    var newPerson = Observable("");

    module.exports = {
        persons:persons,
        bumpScore:bumpScore,
        addPerson:addPerson,
        newPerson:newPerson,
        resetScores:resetScores,
        tmpDebug:Save //TODO delete
    }

    Load();

    </JavaScript>

    <Panel ux:Class="Plus" ux:Name="self" HitTestMode="LocalBounds">
        <Rectangle Height="3" Width="25" Fill="#e5e8ed"/>
        <Rectangle Height="3" Width="25" Fill="#e5e8ed">
            <Rotation Degrees="90" />
        </Rectangle>
        <LayoutAnimation>
            <Move RelativeTo="WorldPositionChange" X="1" Y="1" Duration="0.3" Easing="CubicIn" />
        </LayoutAnimation>
    </Panel>

    <Text ux:Class="SettingsHeader" FontSize="20" TextColor="#000" />
    <ClientPanel>
        <Style>
            <Text TextColor="#e5e8ed" FontSize="20" Margin="5"/>
            <TextInput TextColor="#e5e8ed" FontSize="20" Margin="5"/>
            <DockPanel Margin="2,1,2,1" />
        </Style>
        <iOS.StatusBarConfig ux:Name="statusBarConfig" Style="Light" IsVisible="true"/>

        <PageControl Active="Scores" Dock="Fill" HitTestMode="LocalBoundsAndChildren">
            <Page Name="Settings">
                <StackPanel>
                    <Button Text="Reset scores" Clicked="{resetScores}" />
                    <SettingsHeader Value="Debug:"/>
                    <Button Text="Save" Clicked="{tmpDebug}" />
                </StackPanel>
            </Page>
            <Page Name="Scores">
                <Panel ux:Name="addPanel" Margin="10" >
                    <Plus ux:Name="plus" HitTestMode="LocalBounds">
                        <Clicked>
                            <Toggle Target="adding" />
                        </Clicked>
                    </Plus>
                    <DockPanel>
                        <StackPanel Opacity="1" ux:Name="addPersons" Dock="Top">
                            <Each Items="{persons}">
                                <DockPanel HitTestMode="LocalBoundsAndChildren">
                                    <Text Value="{name}" Clicked="{bumpScore}" Dock="Left"/>
                                    <Clicked>
                                        <Toggle Target="adding" />
                                    </Clicked>
                                </DockPanel>
                            </Each>
                            <DockPanel>
                                <TextInput Value="{newPerson}" PlaceholderText="Enter name"/>
                                <Panel Dock="Right" Width="30" Height="30" ux:Name="addNewPanel" Clicked="{addPerson}" HitTestMode="LocalBounds">
                                    <Clicked>
                                        <Toggle Target="adding" />
                                    </Clicked>
                                </Panel>
                            </DockPanel>
                        </StackPanel>
                        <Panel HitTestMode="LocalBounds">
                            <Clicked>
                                <Toggle Target="adding" />
                            </Clicked>
                        </Panel>
                    </DockPanel>
                    <Rectangle Fill="#fd9308" ux:Name="addRect"/>
                    <LayoutAnimation>
                        <Move RelativeTo="WorldPositionChange" X="1" Y="1" Duration="0.3" Easing="CubicIn" />
                        <Resize RelativeTo="SizeChange" X="1" Y="1" Duration="0.3" Easing="CubicIn" />
                    </LayoutAnimation>
                </Panel>

                <Panel Alignment="BottomRight" ux:Name="corner" Height="70" Width="70" />

                <ScrollView>
                    <StackPanel>
                        <Each Items="{persons}">
                            <DockPanel Background="#5A6571">
                                <Text Value="{name}" />
                                <Text Value="{score}" Dock="Right"/>
                            </DockPanel>
                        </Each>
                    </StackPanel>
                </ScrollView>

                <WhileFalse ux:Name="adding">
                    <Change addPanel.LayoutMaster="corner" />
                    <Change buttonMode.Value="true" />
                    <Change panelMode.Value="false" />
                </WhileFalse>

                <WhileTrue ux:Name="panelMode" Value="true">
                    <Change plus.LayoutMaster="addNewPanel" />
                    <Change plus.HitTestMode="None" />
                </WhileTrue>

                <WhileTrue ux:Name="buttonMode">
                    <Change addRect.CornerRadius="35" Duration=".3" Easing="CubicIn"/>
                    <Change addPersons.Opacity="0" Duration=".1" DurationBack=".1" Easing="CubicIn"/>
                    <Change addPersons.HitTestMode="LocalBounds" />
                </WhileTrue>

            </Page>
        </PageControl>
    </ClientPanel>
</App>
